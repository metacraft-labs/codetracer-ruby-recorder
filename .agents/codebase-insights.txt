# Critical Architecture Notes

## Ruby Debugging Setup
- VS Code debugging is configured with rdbg (Ruby Debug) support
- Use the rdbg-wrapper script in scripts/ to avoid hardcoded paths
- Debug configurations available:
  - "Debug Current Ruby File" - Debug the currently open Ruby file
  - "Debug Current Test File" - Debug test files with proper load paths
  - "Debug All Tests" - Debug the main test runner
- For interactive debugging with Pry, use the "Debug Current Test with Pry" task
- The Ruby LSP is configured for full language support features

## Debugging Gem Installation
- To use debugging features, install: `gem install debug pry`
- The debug gem is required for VS Code rdbg debugging
- Pry is used for interactive debugging tasks
- Native compilation may fail in nix environment due to missing headers
- Alternative: Use system Ruby for gem installation if nix environment has issues

## Codetracer Architecture
When the pure Ruby recorder traces a script that holds a reference to the
`PureRubyRecorder` instance in a local variable, the variable inspection code
would recursively serialise the tracer's internal state. This results in an
explosive amount of output and may appear as an infinite recursion when running
`examples/selective_tracing_pure.rb`. To avoid this, `load_variables` now skips
values that refer to the recorder or its `TraceRecord`.
